package Hello;
import java.util.*;
public class Answer {
	

	public static boolean palindrome(LinkedList ll){
		
		LinkedList empty = new LinkedList();
		
		empty = palindromeHelper(ll.head, empty);
		
		Node h1 = ll.head;
		Node h2 = empty.head;
		
		boolean result = false;
		
		while (h1 != null){
			if (h1.value != h2.value){
				if (result) return false;
				result = true;
			}
			h1 = h1.next;
			h2 = h2.next;
		}
		
		return true;
		
	}
	
	public static LinkedList palindromeHelper(Node n, LinkedList empty){
		if (n.next != null){
			empty = palindromeHelper(n.next, empty);
		}
		
		empty.appendToTail(n.value);
		
		return empty;
		
	}

	
	public static void main(String[] args){

		LinkedList ll = new LinkedList();
		
		ll.appendToTail(1);
		ll.appendToTail(4);
		ll.appendToTail(3);
		ll.appendToTail(4);
		ll.appendToTail(2);
		
		System.out.println(palindrome(ll));
		
	}
	
	
}

class LinkedList{
	Node head;
	
	LinkedList(){
		this.head=null;
	}
	
	public void print(){
		Node n = this.head;
		while (n!= null){
			System.out.println(n.value);
			n=n.next;
		}
	}
	
	public void appendToTail(int value){
		Node newNode = new Node(value);
		if (this.head == null){
			
			this.head = newNode;
		}
		else{
			Node n = this.head;
			while (n.next!= null){
				n = n.next;
			}
			n.next = newNode;
		}
		
	}
	
	
}

class Node{
	
	public Node next;
	public int value;
	
	Node(int value){
		this.value=value;
		this.next=null;
	}
	
}
