import java.util.*;
public class MyAnswer {


    // use stack
    public static boolean palindrome2(LinkedList ll){

        Node slower = ll.head;
        Node faster = ll.head;
        Stack<Integer> stack = new Stack<Integer>();


        while (faster!=null && faster.next!=null){

            stack.push(slower.value);

            slower = slower.next;
            faster = faster.next.next;
        }


        if (faster != null){
            slower = slower.next;
        }

        while (slower != null){
            int n =  stack.pop();

            if (slower.value != n){
                return false;
            }
            slower = slower.next;

        }

        return true;


    }


    public static void main(String[] args){

        LinkedList ll = new LinkedList();

        ll.appendToTail(1);
        ll.appendToTail(8);
        ll.appendToTail(8);
        ll.appendToTail(1);


        System.out.println(palindrome2(ll));

    }

}



class LinkedList{
    Node head;

    LinkedList(){
        this.head=null;
    }

    public void print(){
        Node n = this.head;
        while (n!= null){
            System.out.println(n.value);
            n=n.next;
        }
    }

    public void appendToTail(int value){
        Node newNode = new Node(value);
        if (this.head == null){

            this.head = newNode;
        }
        else{
            Node n = this.head;
            while (n.next!= null){
                n = n.next;
            }
            n.next = newNode;
        }

    }


}

class Node{

    public Node next;
    public int value;

    Node(int value){
        this.value=value;
        this.next=null;
    }

}

class NodePlusAdder{

    public Node node;
    public int adder;

    NodePlusAdder(){

        this.node = null;
        this.adder = 0;

    }
}
