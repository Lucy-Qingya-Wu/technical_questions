
public class FindSuccessorInBST {



    // write an algo to find the next node(i.e., in-order successor) of a given node in a binary search
    // tree. You may assume that each node has a link to its parent.
    public Node findSuccessorInBST(Node n, Tree tree){
        
        if (n == null) return null;

        if (n.right != null){
            n = n.right;
            while (n.left!=null){
                n = n.left;
            }
            return n;
        }else{
            while (n.parent != null && n != n.parent.left){
                n = n.parent;
            }
            return n.parent;
            
        }

    }
    
	public static void main(String[] args) {
		Node node0 = new Node(0);
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        Node node5 = new Node(5);
        Node node6 = new Node(6);
        
        node1.parent = node3;
        node5.parent = node3;
        
        node0.parent = node1;
        node2.parent = node1;
        
        node3.left = node1;
        node3.right = node5;
        node1.left = node0;
        node1.right = node2;
        
        Tree t = new Tree();
        t.root = node3;
        
        FindSuccessorInBST findSuccessor = new FindSuccessorInBST();
        Node result = findSuccessor.findSuccessorInBST(node5, t);
        if (result != null){
        	System.out.println(result.value);
        }
       
        

	}    

}

class Node{


    Node parent;
    int value;
    Node left;
    Node right;


}

class Tree{


    Node root;

}

