import java.util.*;
public class SetOfStacks {

    private Stack<StackOfPlates> set = new Stack<StackOfPlates>();


    public void push(Integer plate){

        if (set.size() == 0 || set.peek().reachMax()){

            StackOfPlates oneStack = new StackOfPlates();

            set.push(oneStack);

        }

        StackOfPlates oneStack = set.peek();
        oneStack.push(plate);

    }

    public Integer popAt(int i){

        int size = set.size();

        if (i > size){
            return null;
        }

        Stack<StackOfPlates> temp = new Stack<StackOfPlates>();
        int count = 0;
        while (count < size-i){
            temp.push(set.pop());
            count ++;
        }

        Integer answer = set.peek().pop();
        count = 0;
        while (count < size-i){
            set.push(temp.pop());
            count ++;
        }
        return answer;

    }

    public Integer pop(){
        if (set.size() == 0){
            return null;
        }
        StackOfPlates oneStack = set.peek();

        if (oneStack.size() == 0){
            return null;
        }
        return oneStack.pop();
    }

    public static void main(String[] args){
        SetOfStacks s = new SetOfStacks();


        s.push(3);
        s.push(2);
        s.push(1);
        System.out.println(s.pop());
        s.push(0);
        System.out.println(s.popAt(2));
        System.out.println(s.popAt(1));



    }

}

class StackOfPlates{


    private Stack<Integer> s = new Stack<Integer>();

    // it has size limits
    final int capacity = 2;


    int size = 0;

    public void push(Integer plate){

        s.push(plate);
        this.size ++;

    }

    public boolean reachMax(){
        return size == capacity;
    }

    public Integer pop(){
        return s.pop();
    }

    public int size(){
        return this.size;
    }

}


