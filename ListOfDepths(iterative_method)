import java.util.*;

public class ListOfDepths {

   public LinkedList<LinkedList> createListOfDepth(Tree t){


       LinkedList<LinkedList> result = new LinkedList<LinkedList>();


       LinkedList<Node> current = new LinkedList<Node>();


       current.add(t.root);

       while (current.size() > 0){
           result.add(current);
           LinkedList<Node> parents = current;
           current = new LinkedList<Node>();
           for (Node p:parents){

               if (p.left!=null){
                   current.add(p.left);
               }
               if (p.right!=null){
                   current.add(p.right);
               }
           }

       }



       return result;
   }



    public static void main(String[] args){
        ListOfDepths listOfDepths = new ListOfDepths();


        Node node0 = new Node(0);
        Node node1 = new Node(1);
        Node node2 = new Node(2);
        Node node3 = new Node(3);
        Node node4 = new Node(4);
        Node node5 = new Node(5);
        Node node7 = new Node(7);

        node0.left = node1;
        node0.right = node2;

        node1.left = node3;
        node1.right = node4;

        node2.left = node5;
        node2.right = node7;



        Tree t = new Tree();
        t.root = node0;


        ListOfDepths listOfDepths1 = new ListOfDepths();

        LinkedList<LinkedList> result = listOfDepths1.createListOfDepth(t);

        for (int level=0;level<result.size();level++){
            LinkedList<Node> ll = result.get(level);
            for(Node n:ll){
                System.out.print(n.value);
            }
            System.out.println();
        }
    }
}

class Tree{
    Node root;
}

class Node{
    int value;
    Node left;
    Node right;

    public Node(int value){
        this.value = value;
    }



}
