import java.util.LinkedList;
import java.util.Stack;
public class Graph{

    Node head;


    public Node bfs(Node n1, Node n2){
        LinkedList<Node> ll = new LinkedList<Node>();
        if (n1 == n2){
            return n1;
        }
        ll.add(n1);
        while (!ll.isEmpty()){
            Node n = ll.removeFirst();
            n.status = State.Visited;
            System.out.println(n.value);
            if (n.adjacent != null){
                for (Node neighbor : n.adjacent){
                    if (neighbor == n2){
                        return neighbor;
                    }
                    if (neighbor.status == State.Unvisited){
                        neighbor.status = State.Visiting;
                        ll.add(neighbor);
                    }
                }
            }
        }
        return null;
    }

    public Node dfs(Node n1, Node n2){
        Stack<Node> s = new Stack<Node>();
        if (n1 == n2) return n1;
        s.push(n1);

        while(!s.isEmpty()){
            Node n = s.pop();
            n.status = State.Visited;
            System.out.println(n.value);
            if (n.adjacent != null){
                for (Node neighbor: n.adjacent){
                    if (neighbor == n2) return neighbor;
                    if (neighbor.status == State.Unvisited){
                        s.push(neighbor);
                        neighbor.status = State.Visiting;
                    }
                }
            }

        }
        return null;

    }


    public static void main(String[] args){
        System.out.println("--below is dfs--------");
        Node n0 = new Node(0);
        Node n1 = new Node(1);
        Node n2 = new Node(2);
        Node n3 = new Node(3);
        Node n4 = new Node(4);
        Node n5 = new Node(5);

        n0.adjacent = new Node[]{n1, n4, n5};
        n1.adjacent = new Node[]{n4, n3};
        n2.adjacent = new Node[]{n1};
        n3.adjacent = new Node[]{n4, n2};


        Graph g = new Graph();
        Node result = g.dfs(n0, n2);
        if (result != null) System.out.println("value is " + result.value);
        else{
            System.out.println("could not find it");
        }



    }



}
enum State {Visiting, Visited, Unvisited}
class Node{
    Node[] adjacent;
    int value;
    State status;
    public Node(int value){
        this.value = value;
        this.status = State.Unvisited;
    }
}
